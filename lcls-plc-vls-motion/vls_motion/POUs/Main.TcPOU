<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Main" Id="{e6fa2b58-86f6-4521-8196-c6010dfb509b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	 // VLS Motor 1; VLS-Slit-Right
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-3002_E1]^STM Status^Status^Digital input 2;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-3002_E1]^STM Status^Status^Digital input 1'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:SR
        field: DESC VLS Right Slit Blade
    '}
    M1: DUT_MotionStage;
    fbMotion1: FB_MotionStage;

	 // VLS Motor 2; VLS-Slit-Left
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-3002_E2]^STM Status^Status^Digital input 2;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-3002_E2]^STM Status^Status^Digital input 1'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:SL
        field: DESC VLS Left Slit Blade
    '}
    M2: DUT_MotionStage;
    fbMotion2: FB_MotionStage;
	
	// VLS Motor 3; VLS-Slit-Down
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-3002_E3]^STM Status^Status^Digital input 1;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-3002_E3]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:SD
        field: DESC VLS Lower Slit Blade
    '}
    M3: DUT_MotionStage;
    fbMotion3: FB_MotionStage;
	
	
	// VLS Motor 4; VLS-Slit-Up
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-1002_E4]^STM Status^Status^Digital input 2;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-1002_E4]^STM Status^Status^Digital input 1'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:SU
        field: DESC VLS Upper Slit Blade
    '}
    M4: DUT_MotionStage;
    fbMotion4: FB_MotionStage;
	
	
	
	// VLS Motor 5; focusing mirror
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-1002_E5]^STM Status^Status^Digital input 1;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-1002_E5]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:FM
        field: DESC VLS Focus Mirror
    '}
    M5: DUT_MotionStage;
    fbMotion5: FB_MotionStage;
	
	// VLS Motor 6; grating
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-1002_E6]^STM Status^Status^Digital input 1;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-1002_E6]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:GP
        field: DESC VLS Grating
    '}
    M6: DUT_MotionStage;
    fbMotion6: FB_MotionStage;
	
	// VLS Motor 7; camera translation
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-1002_E7]^STM Status^Status^Digital input 2;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-1002_E7]^STM Status^Status^Digital input 1'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:CD
        field: DESC VLS Camera Distance
    '}
    M7: DUT_MotionStage;
    fbMotion7: FB_MotionStage;
	
	// VLS Motor 8; camera pitch
	{attribute 'TcLinkTo' := '	.bLimitForwardEnable:=TIIB[VLS_EP7041-1002_E8]^STM Status^Status^Digital input 1;
								.bLimitBackwardEnable:=TIIB[VLS_EP7041-1002_E8]^STM Status^Status^Digital input 2'}
    {attribute 'pytmc' := '
        pv: TMO:VLS:MMS:CP
        field: DESC VLS Camera Pitch
    '}
    M8: DUT_MotionStage;
    fbMotion8: FB_MotionStage;

	
	//persistent data
	fbWritePersistentData	: WritePersistentData;
	bInit					: BOOL := TRUE;
	fbWriteDelay			: TON;
	fbStartDelay			: TON;
	mcSetPosition			: ARRAY [1..8] of MC_SetPosition;
END_VAR

VAR PERSISTENT
	fSlitRightPos	: LREAL;
	fSlitLeftPos	: LREAL;
	fSlitDownPos	: LREAL;
	fSlitUpPos		: LREAL;
	fFocusMirrorPos	: LREAL;
	fGratingPos		: LREAL;
	fCameraDistPos	: LREAL;
	fCameraPitchPos	: LREAL;
	test			: LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbStartDelay(IN:=TRUE, PT:=T#1s);
IF bInit and fbStartDelay.Q THEN
	//Sets axes position with persistent value
	mcSetPosition[1](Axis:=M1.Axis, Position:=fSlitRightPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[2](Axis:=M2.Axis, Position:=fSlitLeftPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[3](Axis:=M3.Axis, Position:=fSlitDownPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[4](Axis:=M4.Axis, Position:=fSlitUpPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[5](Axis:=M5.Axis, Position:=fFocusMirrorPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[6](Axis:=M6.Axis, Position:=fGratingPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[7](Axis:=M7.Axis, Position:=fCameraDistPos, Mode:=FALSE, Execute:=TRUE);
	mcSetPosition[8](Axis:=M8.Axis, Position:=fCameraPitchPos, Mode:=FALSE, Execute:=TRUE);
	if (mcSetPosition[1].Done AND mcSetPosition[2].Done AND mcSetPosition[3].Done AND mcSetPosition[4].Done AND 
	mcSetPosition[5].Done AND mcSetPosition[6].Done AND mcSetPosition[7].Done AND mcSetPosition[8].Done) THEN
		bInit:=FALSE;
		mcSetPosition[1](Axis:=M1.Axis, Execute:=FALSE);
		mcSetPosition[2](Axis:=M2.Axis, Execute:=FALSE);
		mcSetPosition[3](Axis:=M3.Axis, Execute:=FALSE);
		mcSetPosition[4](Axis:=M4.Axis, Execute:=FALSE);
		mcSetPosition[5](Axis:=M5.Axis, Execute:=FALSE);
		mcSetPosition[6](Axis:=M6.Axis, Execute:=FALSE);
		mcSetPosition[7](Axis:=M7.Axis, Execute:=FALSE);
		mcSetPosition[8](Axis:=M8.Axis, Execute:=FALSE);
	END_IF
ELSIF (fbStartDelay.Q) THEN
	
	//M1.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M1.bHardwareEnable := TRUE;
	M1.bPowerSelf := TRUE;
	//M1.bLimitForwardEnable := (M1.bLimitForwardEnable AND M1.bLimitBackwardEnable);
	//M1.bLimitBackwardEnable := (M1.bLimitForwardEnable AND M1.bLimitBackwardEnable);
	fbMotion1(stMotionStage := M1); // right slit blade
	
	//M2.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M2.bHardwareEnable := TRUE;
	M2.bPowerSelf := TRUE;
	//M2.bLimitForwardEnable := (M2.bLimitForwardEnable AND M2.bLimitBackwardEnable);
	//M2.bLimitBackwardEnable := (M2.bLimitForwardEnable AND M2.bLimitBackwardEnable);
	fbMotion2(stMotionStage := M2); // left slit blade
	
	//M3.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M3.bHardwareEnable := TRUE;
	M3.bPowerSelf := TRUE;
	//M3.bLimitForwardEnable := (M3.bLimitForwardEnable AND M3.bLimitBackwardEnable);
	//M3.bLimitBackwardEnable := (M3.bLimitForwardEnable AND M3.bLimitBackwardEnable);
	fbMotion3(stMotionStage := M3); // down slit blade
	
	//M4.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M4.bHardwareEnable := TRUE;
	M4.bPowerSelf := TRUE;
	//M4.bLimitForwardEnable := (M4.bLimitForwardEnable AND M4.bLimitBackwardEnable);
	//M4.bLimitBackwardEnable := (M4.bLimitForwardEnable AND M4.bLimitBackwardEnable);
	fbMotion4(stMotionStage := M4); // up slit blade
	
	//M5.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M5.bHardwareEnable := TRUE;
	M5.bPowerSelf := TRUE;
	//M5.bLimitForwardEnable := (M5.bLimitForwardEnable AND M5.bLimitBackwardEnable);
	//M5.bLimitBackwardEnable := (M5.bLimitForwardEnable AND M5.bLimitBackwardEnable);
	fbMotion5(stMotionStage := M5); // focusing mirror
	
	//M6.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M6.bHardwareEnable := TRUE;
	M6.bPowerSelf := TRUE;
	//M6.bLimitForwardEnable := (M6.bLimitForwardEnable AND M6.bLimitBackwardEnable);
	//M6.bLimitBackwardEnable := (M6.bLimitForwardEnable AND M6.bLimitBackwardEnable);
	fbMotion6(stMotionStage := M6); // grating
	
	//M7.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M7.bHardwareEnable := TRUE;
	M7.bPowerSelf := TRUE;
	//M7.bLimitForwardEnable := (M7.bLimitForwardEnable AND M7.bLimitBackwardEnable);
	//M7.bLimitBackwardEnable := (M7.bLimitForwardEnable AND M7.bLimitBackwardEnable);
	fbMotion7(stMotionStage := M7); // camera pitch
	
	//M8.nEnableMode := Enum_StageEnableMode.ALWAYS;
	M8.bHardwareEnable := TRUE;
	M8.bPowerSelf := TRUE;
	//M8.bLimitForwardEnable := (M8.bLimitForwardEnable AND M8.bLimitBackwardEnable);
	//M8.bLimitBackwardEnable := (M8.bLimitForwardEnable AND M8.bLimitBackwardEnable);
	fbMotion8(stMotionStage := M8); // camera translation

	
	//Keep track of positions
	fSlitRightPos	:= M1.Axis.NcToPlc.ActPos;
	fSlitLeftPos	:= M2.Axis.NcToPlc.ActPos;
	fSlitDownPos	:= M3.Axis.NcToPlc.ActPos;
	fSlitUpPos		:= M4.Axis.NcToPlc.ActPos;
	fFocusMirrorPos	:= M5.Axis.NcToPlc.ActPos;
	fGratingPos		:= M6.Axis.NcToPlc.ActPos;
	fCameraDistPos	:= M7.Axis.NcToPlc.ActPos;
	fCameraPitchPos	:= M8.Axis.NcToPlc.ActPos;
	
	if fbWriteDelay.Q THEN
		fbWritePersistentData(NETID:='', PORT:=851, START:=TRUE, TMOUT:=T#1S);
		fbWriteDelay(IN:=FALSE);
	ELSE
		fbWritePersistentData(START:=FALSE);
		fbWriteDelay(IN:=TRUE, PT:=T#0.5S);
	END_IF
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>